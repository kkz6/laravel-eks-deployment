# Alternative: Service Account Key Method (Fallback)
# Use this only if Workload Identity is not available or not working
# This method stores the service account key as a Kubernetes secret

apiVersion: v1
kind: Secret
metadata:
  name: gcs-service-account-key
  namespace: devopscorner-dev
type: Opaque
data:
  # Base64 encoded service account JSON key file
  # To generate: cat service-account-key.json | base64 -w 0
  key.json: <BASE64_ENCODED_SERVICE_ACCOUNT_KEY>

---
# ConfigMap with GCS configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: gcs-config
  namespace: devopscorner-dev
data:
  GOOGLE_CLOUD_PROJECT_ID: "YOUR_PROJECT_ID"
  GOOGLE_CLOUD_STORAGE_BUCKET: "your-project-laravel-shared-stg"
  GCS_BUCKET_PREFIX: "tenant"
  GCS_BUCKET_LOCATION: "US"
  GCS_STORAGE_CLASS: "STANDARD"
  GOOGLE_CLOUD_STORAGE_PATH_PREFIX: ""
  GOOGLE_CLOUD_STORAGE_API_URI: ""
  GOOGLE_CLOUD_STORAGE_API_ENDPOINT: ""
  GOOGLE_CLOUD_KEY_FILE: "/var/secrets/gcs/key.json"

---
# Example of how to mount the secret in your deployment
# Add this to your deployment.yaml template:
# 
# spec:
#   template:
#     spec:
#       containers:
#       - name: laravel
#         volumeMounts:
#         - name: gcs-key
#           mountPath: /var/secrets/gcs
#           readOnly: true
#         envFrom:
#         - configMapRef:
#             name: gcs-config
#       volumes:
#       - name: gcs-key
#         secret:
#           secretName: gcs-service-account-key
